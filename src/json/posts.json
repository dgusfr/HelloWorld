[
  {
    "id": 1,
    "titulo": "Jogo da Memória",
    "texto": "> Fonte: <https://memory-game-js-eight.vercel.app/> \n\n\n\n\n\n Este é um jogo de memória desenvolvido em JavaScript que desafia os jogadores a combinar pares de cartas. O jogo mede o tempo e a quantidade de movimentos necessários para encontrar todas as combinações.\n\n\n\n\n\n ### Descrição \n\n\n\n\n\n Este é um jogo de memória desenvolvido em JavaScript que desafia os jogadores a combinar pares de cartas. O jogo mede o tempo e a quantidade de movimentos necessários para encontrar todas as combinações. \n\n\n\n\n\n\n\n\n\n\n\n #### Principais Funcionalidades \n\n\n\n\n\n - **Interface do Usuário**: Exibe o tempo decorrido e a contagem de movimentos.\n\n\n - **Controle do Jogo**: Botões para iniciar e parar o jogo.\n\n\n - **Gerador de Cartas**: Gera cartas com imagens aleatórias.\n\n\n - **Mecanismo de Jogo**: Implementa a lógica de virar cartas e verificar correspondências.\n\n\n - **Feedback do Usuário**: Informa ao jogador quando o jogo é vencido.\n\n\n\n\n\n ![Interface](/assets/posts/1/capa.png) \n\n\n\n\n\n\n\n\n\n\n\n #### Como o Jogo Funciona \n\n\n\n\n\n 1. **Inicialização**: Quando o botão \"start\" é clicado, o jogo inicia, escondendo os controles e exibindo as cartas geradas aleatoriamente.\n\n\n\n\n\n 2. **Cronômetro**: O tempo começa a ser contado e exibido no formato MM:SS.\n\n\n\n\n\n 3. **Movimentos**: Cada clique em uma carta conta como um movimento, e o contador é atualizado.\n\n\n\n\n\n 4. **Virar Cartas**: Quando uma carta é clicada, ela é virada. O jogador pode virar duas cartas por vez.\n\n\n\n\n\n 5. **Verificação de Correspondência**: Se as duas cartas viradas forem iguais, elas permanecem viradas; caso contrário, elas voltam à posição inicial após um breve atraso.\n\n\n\n\n\n 6. **Vencer o Jogo**: Quando todas as cartas são combinadas, o jogo para e exibe uma mensagem de vitória.\n\n\n\n\n\n\n\n\n\n\n\n #### Desenvolvimento do Jogo \n\n\n\n\n\n **HTML**: Estrutura básica com elementos para exibir o tempo, movimentos, botões de controle e container das cartas.\n\n\n\n\n\n **CSS**: Estilização para layout responsivo e animação das cartas.\n\n\n\n\n\n **JavaScript**: \n\n\n\n\n\n   - **Inicialização e Controle**: Funções para iniciar e parar o jogo, além de configurar o ambiente inicial.\n\n\n   - **Gerador de Cartas**: Função `generateRandom` para selecionar imagens aleatórias e `matrixGenerator` para criar e embaralhar as cartas no grid.\n\n\n   - **Mecanismo de Jogo**: Lógica de virar cartas, contagem de movimentos, e verificação de correspondência.\n\n\n   - **Cronômetro e Contadores**: Funções `timeGenerator` e `movesCounter` para atualização contínua do tempo e movimentos.\n\n\n\n\n\n\n\n\n\n\n\n "
  },
  {
    "id": 2,
    "titulo": "ByteBank",
    "texto": "> Fonte: <https://bytebank-javascript-ten.vercel.app/> \n\n\n\n\n\n Este é um projeto de cotação monetária em tempo real, desenvolvido em JavaScript, que exibe a variação de moedas como o Dólar e o Iene em gráficos de linha. O sistema utiliza Web Workers para obter as cotações de forma assíncrona e atualizar os gráficos dinamicamente.\n\n\n\n\n\n ### Descrição \n\n\n\n\n\n Este é um projeto de cotação monetária em tempo real desenvolvido em JavaScript. Ele exibe a variação de moedas como o Dólar e o Iene em gráficos de linha, utilizando Web Workers para obter cotações de forma assíncrona e atualizar os gráficos dinamicamente.\n\n\n\n\n\n ![Interface](/assets/posts/2/capa.png)  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n #### Principais Funcionalidades \n\n\n\n\n\n - **Gráficos em Tempo Real**: Exibe gráficos de linha atualizados em tempo real para Dólar e Iene.\n\n\n - **Obtenção de Dados Assíncrona**: Utiliza Web Workers para buscar cotações sem bloquear a interface do usuário.\n\n\n - **Atualização Dinâmica**: Adiciona novos dados aos gráficos conforme as cotações são recebidas.\n\n\n - **Interface de Usuário**: Inclui elementos para exibir gráficos e valores das cotações.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n #### Como o Projeto Funciona \n\n\n\n\n\n\n\n\n\n\n\n 1. **Inicialização dos Gráficos**: Dois gráficos de linha são configurados usando a biblioteca Chart.js, um para o Dólar e outro para o Iene.\n\n\n\n\n\n 2. **Geração de Horário**: A função `geraHorario` retorna o horário atual formatado como HH:MM:SS, usado como rótulo nos gráficos.\n\n\n\n\n\n 3. **Adição de Dados aos Gráficos**: A função `adicionarDados` insere novos rótulos e valores nos gráficos e os atualiza.\n\n\n\n\n\n 4. **Web Workers**: Dois Web Workers (`workerDolar` e `workerIene`) são usados para obter cotações de Dólar e Iene respectivamente. Eles enviam mensagens com os valores das cotações, que são então processadas para atualizar os gráficos e exibir as cotações na interface.\n\n\n\n\n\n 5. **Manipulação de Cotações**: A função `selecionaCotacao` é chamada para atualizar a exibição das cotações mais recentes para cada moeda.\n\n\n\n\n\n\n\n\n\n\n\n #### Desenvolvimento do Projeto \n\n\n\n\n\n - **HTML**: Estrutura básica com elementos para exibir gráficos e cotações de moedas.\n\n\n - **CSS**: Arquivo `styles.css` para estilização da página.\n\n\n - **JavaScript**: \n\n\n   - **Inicialização e Controle**: Configuração dos gráficos e inicialização dos Web Workers.\n\n\n   - **Obtenção de Dados**: Uso de Web Workers para buscar cotações de moedas de forma assíncrona.\n\n\n   - **Atualização Dinâmica**: Funções para gerar horários, adicionar dados aos gráficos e manipular cotações.\n\n\n\n\n\n ### Conclusão \n\n\n\n\n\n Este projeto de cotação monetária em tempo real demonstra como integrar Web Workers com gráficos dinâmicos para criar uma aplicação que exibe informações atualizadas sem bloquear a interface do usuário. Utilizando JavaScript e a biblioteca Chart.js, o sistema oferece uma visualização contínua das variações de câmbio, sendo um exemplo eficaz de como manejar dados assíncronos e atualizar a UI em tempo real."
  },
  {
    "id": 3,
    "titulo": "Lista de Compras",
    "texto": "> Fonte: <https://objects-in-js.vercel.app/> \n\n\n\n\n\n  \n\n\n\n\n\n Este é um projeto de lista de compras desenvolvido em JavaScript que permite aos usuários adicionar, editar, marcar como comprados e excluir itens. O aplicativo utiliza localStorage para salvar e recuperar os itens da lista, garantindo que os dados sejam persistidos entre sessões.\n\n\n\n\n\n ### Descrição \n\n\n\n\n\n Este projeto é uma lista de compras em JavaScript que permite aos usuários adicionar, editar, marcar como comprados e excluir itens, com persistência de dados usando localStorage.\n\n\n\n\n\n ![Interface](/assets/posts/3/capa.png) \n\n\n\n\n\n\n\n\n\n\n\n #### Principais Funcionalidades \n\n\n\n\n\n - **Adicionar Itens**: Permite aos usuários adicionar novos itens à lista de compras.\n\n\n\n\n\n - **Editar Itens**: Possibilita a edição dos itens já adicionados.\n\n\n\n\n\n - **Marcar como Comprado**: Os itens podem ser marcados como comprados, movendo-os para uma seção separada.\n\n\n\n\n\n - **Excluir Itens**: Itens podem ser removidos da lista.\n\n\n\n\n\n - **Persistência de Dados**: Utiliza localStorage para salvar e recuperar itens da lista entre sessões.\n\n\n\n\n\n #### Como o Projeto Funciona \n\n\n\n\n\n 1. **Inicialização**: Ao carregar a página, verifica se há uma lista de itens armazenada no localStorage. Se houver, os itens são recuperados e exibidos.\n\n\n\n\n\n 2. **Adicionar Itens**: O formulário de entrada permite que os usuários adicionem novos itens à lista. Itens duplicados não são permitidos.\n\n\n\n\n\n 3. **Marcar como Comprado**: Itens podem ser marcados como comprados, movendo-os para a seção de itens comprados e atualizando o localStorage.\n\n\n\n\n\n 4. **Editar Itens**: Os itens podem ser editados diretamente na lista. Quando um item está sendo editado, os demais campos de entrada são desativados até que a edição seja salva.\n\n\n\n\n\n 5. **Excluir Itens**: Os itens podem ser excluídos da lista. A lista é atualizada e salva no localStorage após a exclusão.\n\n\n\n\n\n 6. **Persistência de Dados**: Sempre que a lista é modificada, o localStorage é atualizado para garantir que os dados sejam salvos entre sessões.\n\n\n\n\n\n\n\n\n\n\n\n #### Desenvolvimento do Projeto \n\n\n\n\n\n\n\n\n\n\n\n - **HTML**: Define a estrutura básica da interface do usuário, incluindo campos de entrada e listas de itens.\n\n\n\n\n\n - **CSS**: Arquivo `styles.css` para estilização da página, utilizando o framework Bulma para um design responsivo e a biblioteca Font Awesome para ícones.\n\n\n\n\n\n - **JavaScript**: \n\n\n\n\n\n   - **Manipulação da Lista**: Funções para adicionar, editar, marcar como comprado e excluir itens.\n\n\n\n\n\n  - **Persistência de Dados**: Funções para salvar e recuperar dados do localStorage.\n\n\n\n\n\n   - **Eventos de UI**: Eventos para manipular interações do usuário com a interface, como cliques e submissões de formulário.\n\n\n\n\n\n ### Conclusão \n\n\n\n\n\n A integração de frameworks como Bulma e Font Awesome aprimora a estética e a responsividade da interface, proporcionando uma experiência de usuário intuitiva e eficiente."
  },
  {
    "id": 4,
    "titulo": "Consulta CEP",
    "texto": "> Fonte: <https://consulta-cep-jade.vercel.app/> \n\n\n\n\n\n Este projeto permite ao usuário buscar informações de um endereço a partir de um CEP utilizando a API do ViaCEP. Abaixo segue a descrição detalhada do projeto.\n\n\n\n\n\n**Descrição:**\n\n\n\n\n\nEste projeto realiza uma consulta de CEP utilizando a API do ViaCEP. O usuário pode inserir um CEP e obter as informações correspondentes preenchidas automaticamente em um formulário. ![Interface](/assets/posts/4/capa.png)\n\n\n\n\n\n\n\n\n\n\n\n**Principais Funcionalidades:**\n\n\n\n\n\n* **Entrada de CEP:** Permite ao usuário inserir um CEP para consulta.\n\n\n\n\n\n* **Botão de Busca:** Inicia a consulta na API do ViaCEP ao ser clicado.\n\n\n* **Preenchimento Automático:** Os campos do formulário são preenchidos automaticamente com os dados retornados da API.\n\n\n\n\n\n\n\n\n\n\n\n **Como o Projeto Funciona:** \n\n\n\n\n\n\n\n\n\n\n\n* **Inicialização:** O usuário insere um CEP no campo de entrada e clica no botão de busca.\n\n\n\n\n\n* **Requisição API:** O CEP é enviado para a API do ViaCEP através de uma requisição fetch.\n\n\n\n\n\n* **Processamento de Dados:** A resposta da API é convertida em JSON e os dados são utilizados para preencher os campos do formulário.\n\n\n\n\n\n* **Tratamento de Erros:** Caso ocorra um erro na requisição, uma mensagem de erro é exibida no console.\n\n\n\n\n\n**Desenvolvimento do Projeto:**\n\n\n\n\n\n* **HTML:** Define a estrutura da interface com um campo de entrada para o CEP e um botão de busca.\n\n\n\n\n\n* **JavaScript:**\n\n\n\n\n\n  * **Manipulação do DOM:** Acessa e manipula os elementos HTML utilizando `getElementById` e `querySelector`.\n\n\n\n\n\n  * **Requisição Fetch:** Realiza a consulta na API do ViaCEP e processa a resposta.\n\n\n\n\n\n  * **Função de Preenchimento:** Preenche os campos do formulário com os dados retornados da API.\n\n\n\n\n\n  * **Tratamento de Erros:** Lida com possíveis erros na requisição e exibe uma mensagem no console.\n\n\n\n\n\n**Conclusão:**\n\n\n\n\n\nEste projeto demonstra como integrar uma API externa em uma aplicação web para buscar informações de um endereço a partir de um CEP. Utiliza JavaScript para realizar a requisição e manipular o DOM, proporcionando uma funcionalidade útil e interativa para o usuário."
  },
  {
    "id": 5,
    "titulo": "Barbershop",
    "texto": "> Fonte: <https://barbershop-website-gold.vercel.app/> \n\n\n\n\n\n   \n\n\n\n\n\n Este é um projeto de website para uma barbearia fictícia chamado 'Barbearia Generic' eu tenho grande apelo emocional a esse projeto, pois ele foi o meu primeiro no mundo do Front-end. O site apresenta informações sobre a barbearia, sua localização, benefícios oferecidos e inclui elementos visuais como imagens e vídeos. Abaixo segue a descrição detalhada do projeto. ![Interface](/assets/posts/5/capa.png) \n\n\n\n\n\n # Descrição: \n\n\n\n\n\n Este projeto é um site para a Barbearia Generic, contendo informações sobre a empresa, localização, benefícios e inclui imagens e vídeos para enriquecer a apresentação visual. \n\n\n\n\n\n\n\n\n\n\n\n # Principais Funcionalidades: \n\n\n\n\n\n* **Página Inicial:** Apresenta um banner e um menu de navegação para as páginas principais (Home, Produtos, Contato).\n\n\n\n\n\n* **Seção Sobre:** Fornece uma introdução detalhada sobre a barbearia, incluindo sua missão e a qualidade do serviço oferecido.\n\n\n\n\n\n* **Seção Mapa:** Mostra a localização da barbearia usando um iframe do Google Maps.\n\n\n\n\n\n* **Seção Benefícios:** Lista os principais benefícios e diferenciais do serviço, acompanhados de uma imagem ilustrativa.\n\n\n\n\n\n* **Vídeo Promocional:** Integra um vídeo do YouTube para promover a barbearia.\n\n\n\n\n\n # Como o Projeto Funciona: \n\n\n\n\n\n* **Estrutura HTML:** Define a estrutura básica da página, incluindo cabeçalho, seções principais e rodapé.\n\n\n\n\n\n* **CSS:** Utiliza dois arquivos de estilos ('reset.css' para normalizar estilos e 'style.css' para estilização personalizada), além de fontes do Google Fonts.\n\n\n\n\n\n* **Imagens e Vídeos:** Integração de imagens para visualização da marca e um vídeo do YouTube para engajamento visual.\n\n\n\n\n\n* **Mapa Interativo:** Usa um iframe do Google Maps para exibir a localização da barbearia.\n\n\n\n\n\n # Desenvolvimento do Projeto: \n\n\n\n\n\n* **HTML:** Define a estrutura da interface com cabeçalho, corpo principal e rodapé.\n\n\n\n\n\n* **CSS:** Arquivos 'reset.css' e 'style.css' são usados para estilização, garantindo uma aparência consistente e agradável.\n\n\n\n\n\n* **Imagens:** As imagens são usadas para logotipo, banner e ilustrações nas seções 'Sobre' e 'Benefícios'.\n\n\n\n\n\n* **Vídeo e Mapa:** A integração de um vídeo do YouTube e um mapa interativo do Google Maps proporciona uma experiência interativa aos visitantes.\n\n\n\n\n\n**Conclusão:**\n\n\n\n\n\nEste projeto demonstra a construção de um website informativo e visualmente atraente para uma barbearia fictícia. Utiliza HTML e CSS para criar uma interface de usuário organizada e eficiente, com a integração de elementos visuais interativos para melhorar a experiência do usuário. "
  },
  {
    "id": 6,
    "titulo": "Brafé",
    "texto": "> Fonte: <https://brafe-css.vercel.app/> \n\n\n\n\n\n Este projeto é um website para a cafeteria fictícia Brafé, que oferece uma experiência imersiva ao apresentar os produtos e a história do café brasileiro. Abaixo segue a descrição detalhada do projeto.\n\n\n\n\n\n # Descrição: \n\n\n\n\n\nEste projeto é um website para a cafeteria Brafé, destacando produtos, história e locais das unidades. O site inclui informações sobre a cafeteria, suas ofertas de café e localizações, com imagens e links para mais detalhes. ![Interface](/assets/posts/6/capa.png) \n\n\n\n\n\n\n\n\n\n\n\n**Principais Funcionalidades:**\n\n\n\n\n\n* **Página Inicial:** Apresenta um banner com o slogan e uma introdução ao café brasileiro.\n\n\n* **Seção Sobre:** Fornece uma breve história e descrição da paixão pela produção de café.\n\n\n* **Seção Produtos:** Descreve diferentes tipos de café oferecidos pela cafeteria, cada um com uma descrição e imagem.\n\n\n* **Seção Locais:** Detalha as diferentes unidades da Brafé, com imagens e links para visualizar no mapa.\n\n\n* **Assinatura de Newsletter:** Permite aos visitantes inscreverem-se para receber promoções e eventos mensais.\n\n\n\n\n\n\n\n\n\n\n\n # Como o Projeto Funciona: \n\n\n\n\n\n* **Estrutura HTML:** Define a estrutura básica da página, incluindo cabeçalho, corpo principal e rodapé.\n\n\n* **CSS:** Utiliza um arquivo de estilo ('style.css') para a estilização, garantindo uma aparência consistente e profissional.\n\n\n* **Imagens e Links:** Integra várias imagens para ilustração e links para navegação entre seções e visualização de mapas.\n\n\n\n\n\n**Desenvolvimento do Projeto:**\n\n\n\n\n\n* **HTML:** Define a estrutura da interface com cabeçalho, corpo principal e rodapé.\n\n\n* **CSS:** Arquivo 'style.css' para estilização, assegurando um design responsivo e atraente.\n\n\n* **Imagens:** Utilizadas para logotipo, produtos, e unidades, enriquecendo a apresentação visual.\n\n\n* **Formulário:** Inclui um formulário simples para assinatura de newsletter, incentivando a interação do usuário.\n\n\n* **Links e Navegação:** Facilita a navegação pelo site e proporciona acesso fácil às informações.\n\n\n\n\n\n**Conclusão:**\n\n\n\n\n\nEste projeto demonstra a construção de um website informativo e visualmente atraente para uma cafeteria fictícia. Utiliza HTML e CSS para criar uma interface de usuário organizada e eficiente, com a integração de imagens e formulários para melhorar a experiência do usuário."
  },
  {
    "id": 7,
    "titulo": "HZC",
    "texto": "> Fonte: <https://hzc-flex-grid-css.vercel.app/> \n\n\n\n\n\n Este projeto é um website para a HZC, que apresenta vídeos, informações sobre os membros e outros conteúdos relacionados. Abaixo segue a descrição detalhada do projeto.\n\n\n\n\n\n**Descrição:**\n\n\n\n\n\nEste projeto é um website para a HZC, destacando vídeos, informações sobre membros, produtos e outros conteúdos. O site inclui diversas seções com imagens, vídeos e links para navegação entre as páginas. ![Interface](/assets/posts/7/capa.png) \n\n\n\n\n\n\n\n**Principais Funcionalidades:**\n\n\n\n\n\n* **Cabeçalho:** Inclui logo, menu de navegação, perfil do usuário e botão de notificação.\n\n\n* **Menu Lateral:** Oferece links para várias seções do site como Início, Vídeos, Picos, Integrantes, Camisas e Pinturas.\n\n\n* **Página Inicial:** Apresenta um vídeo em destaque, vídeos recentes e vídeos mais vistos.\n\n\n* **Artigos e Seções:** Contêm informações sobre vídeos em destaque, vídeos recentes, e vídeos mais vistos, com imagens e descrições detalhadas.\n\n\n* **Rodapé:** Inclui a informação de quem desenvolveu o site.\n\n\n\n\n\n**Como o Projeto Funciona:**\n\n\n\n\n\n* **Estrutura HTML:** Define a estrutura básica do site com cabeçalho, menu lateral, corpo principal e rodapé.\n\n\n* **CSS:** Utiliza arquivos de estilo ('reset.css' e 'estilos.css') para garantir uma aparência consistente e profissional.\n\n\n* **Imagens e Vídeos:** Integra várias imagens e vídeos para ilustrar o conteúdo e facilitar a navegação.\n\n\n\n\n\n**Desenvolvimento do Projeto:**\n\n\n\n\n\n* **HTML:** Define a estrutura do site com seções organizadas e acessíveis.\n\n\n* **CSS:** Arquivos 'reset.css' e 'estilos.css' para estilização, garantindo um design responsivo e atraente.\n\n\n* **Imagens e Vídeos:** Utilizados para banners, thumbnails e conteúdo dos vídeos, enriquecendo a apresentação visual.\n\n\n* **Links e Navegação:** Facilita a navegação entre diferentes seções do site e proporciona acesso rápido às informações.\n\n\n* **JavaScript:** Inclusão do arquivo 'index.js' para funcionalidades interativas adicionais.\n\n\n\n\n\n**Conclusão:**\n\n\n\n\n\nEste projeto demonstra a construção de um website informativo e visualmente atraente para a HZC. Utiliza HTML e CSS para criar uma interface de usuário organizada e eficiente, com a integração de imagens, vídeos e formulários para melhorar a experiência do usuário."
  },
  {
    "id": 8,
    "titulo": "Midi JS",
    "texto": "> Fonte: <https://midi-js-gilt.vercel.app/> \n\n\n\n\n\nEste projeto é uma aplicação web interativa que permite ao usuário tocar sons de instrumentos MIDI através de cliques e teclas do teclado. Abaixo segue a descrição detalhada do projeto.\n\n\n\n\n\n**Descrição:**\n\n\n\n\n\nEste projeto é uma aplicação interativa em JavaScript que permite ao usuário tocar sons de instrumentos MIDI ao clicar em botões ou pressionar teclas do teclado. O site integra elementos de áudio e eventos de teclado para criar uma experiência de uso dinâmica. ![Interface](/assets/posts/1/capa.png)\n\n\n\n\n\n\n\n**Principais Funcionalidades:**\n\n\n\n\n\n* **Seleção de Elementos:** Utiliza uma função para selecionar elementos do DOM.\n\n\n* **Tocar Som:** Função que toca o som associado a um elemento de áudio específico.\n\n\n* **Eventos de Teclado:** Adiciona eventos para tocar som ao clicar ou pressionar as teclas do teclado (Espaço ou Enter).\n\n\n* **Feedback Visual:** Adiciona uma classe 'ativa' à tecla quando pressionada, proporcionando feedback visual.\n\n\n\n\n\n**Como o Projeto Funciona:**\n\n\n\n\n\n* **JavaScript:** Define constantes e funções para selecionar elementos e tocar sons.\n\n\n* **Eventos de Teclado:** Adiciona ouvintes de eventos para 'click', 'keydown' e 'keyup' nas teclas.\n\n\n* **Manipulação de Classes:** Adiciona e remove classes CSS para fornecer feedback visual ao usuário.\n\n\n\n\n\n**Desenvolvimento do Projeto:**\n\n\n\n\n\n* **HTML:** Estrutura básica da página com elementos de áudio e teclas interativas.\n\n\n* **CSS:** Estilização básica para as teclas e elementos de áudio, incluindo a classe 'ativa' para feedback visual.\n\n\n* **JavaScript:** Funções para selecionar elementos, tocar sons e gerenciar eventos de teclado.\n\n\n\n\n\n**Conclusão:**\n\n\n\n\n\nEste projeto demonstra a criação de uma aplicação web interativa usando JavaScript, onde o usuário pode tocar sons de instrumentos MIDI através de cliques e teclas do teclado. Utiliza eventos e manipulação de DOM para criar uma experiência envolvente e dinâmica para o usuário."
  }
]
